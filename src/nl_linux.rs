use netlink_packet_route::constants::*;

pub fn encap_type(t: u16) -> String {
    match t {
        0 => "generic".to_string(),
        ARPHRD_ETHER => "ether".to_string(),
        ARPHRD_EETHER => "eether".to_string(),
        ARPHRD_AX25 => "ax25".to_string(),
        ARPHRD_PRONET => "pronet".to_string(),
        ARPHRD_CHAOS => "chaos".to_string(),
        ARPHRD_IEEE802 => "ieee802".to_string(),
        ARPHRD_ARCNET => "arcnet".to_string(),
        ARPHRD_APPLETLK => "atalk".to_string(),
        ARPHRD_DLCI => "dlci".to_string(),
        ARPHRD_ATM => "atm".to_string(),
        ARPHRD_METRICOM => "metricom".to_string(),
        ARPHRD_IEEE1394 => "ieee1394".to_string(),
        ARPHRD_INFINIBAND => "infiniband".to_string(),
        ARPHRD_SLIP => "slip".to_string(),
        ARPHRD_CSLIP => "cslip".to_string(),
        ARPHRD_SLIP6 => "slip6".to_string(),
        ARPHRD_CSLIP6 => "cslip6".to_string(),
        ARPHRD_RSRVD => "rsrvd".to_string(),
        ARPHRD_ADAPT => "adapt".to_string(),
        ARPHRD_ROSE => "rose".to_string(),
        ARPHRD_X25 => "x25".to_string(),
        ARPHRD_HWX25 => "hwx25".to_string(),
        ARPHRD_PPP => "ppp".to_string(),
        ARPHRD_HDLC => "hdlc".to_string(),
        ARPHRD_LAPB => "lapb".to_string(),
        ARPHRD_DDCMP => "ddcmp".to_string(),
        ARPHRD_RAWHDLC => "rawhdlc".to_string(),
        ARPHRD_TUNNEL => "ipip".to_string(),
        ARPHRD_TUNNEL6 => "tunnel6".to_string(),
        ARPHRD_FRAD => "frad".to_string(),
        ARPHRD_SKIP => "skip".to_string(),
        ARPHRD_LOOPBACK => "loopback".to_string(),
        ARPHRD_LOCALTLK => "ltalk".to_string(),
        ARPHRD_FDDI => "fddi".to_string(),
        ARPHRD_BIF => "bif".to_string(),
        ARPHRD_SIT => "sit".to_string(),
        ARPHRD_IPDDP => "ip/ddp".to_string(),
        ARPHRD_IPGRE => "gre".to_string(),
        ARPHRD_PIMREG => "pimreg".to_string(),
        ARPHRD_HIPPI => "hippi".to_string(),
        ARPHRD_ASH => "ash".to_string(),
        ARPHRD_ECONET => "econet".to_string(),
        ARPHRD_IRDA => "irda".to_string(),
        ARPHRD_FCPP => "fcpp".to_string(),
        ARPHRD_FCAL => "fcal".to_string(),
        ARPHRD_FCPL => "fcpl".to_string(),
        val if val >= ARPHRD_FCFABRIC && val <= ARPHRD_FCFABRIC + 12 => {
            format!("fcfb{}", val - ARPHRD_FCFABRIC)
        }
        ARPHRD_IEEE802_TR => "tr".to_string(),
        ARPHRD_IEEE80211 => "ieee802.11".to_string(),
        ARPHRD_IEEE80211_PRISM => "ieee802.11/prism".to_string(),
        ARPHRD_IEEE80211_RADIOTAP => "ieee802.11/radiotap".to_string(),
        ARPHRD_IEEE802154 => "ieee802.15.4".to_string(),
        65534 => "none".to_string(),
        65535 => "void".to_string(),
        _ => format!("unknown{}", t),
    }
}